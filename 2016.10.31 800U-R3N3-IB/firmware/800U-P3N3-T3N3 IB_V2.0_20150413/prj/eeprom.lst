C51 COMPILER V9.52.0.0   EEPROM                                                            11/14/2016 12:11:10 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN ..\UV4\eeprom.obj
COMPILER INVOKED BY: C:\Program Files\kile\C51\BIN\C51.EXE ..\src\eeprom.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND P
                    -RINT(.\eeprom.lst) TABS(2) OBJECT(..\UV4\eeprom.obj)

line level    source

   1          
   2          #define AP_EPROM_GLOBALS  
   3          #include "extern_symbol.h" 
   4          
   5            
   6          
   7          typedef union union_temp16
   8          {
   9              UINT16 un_temp16;
  10              UINT8  un_temp8[2];
  11          }UNION_16;
  12          
  13          
  14          UINT8 Byte_Read(UINT8 * add);              //读一字节，调用前需打开IAP 功能
  15          void Byte_Program(UINT8 * add, UINT8 ch);  //字节编程，调用前需打开IAP 功能
  16          void Sector_Erase(UINT16 add);            //擦除扇区
  17          void IAP_Disable();                       //关闭IAP 功能
  18          
  19          
  20          //读一字节，调用前需打开IAP 功能，入口:DPTR = 字节地址，返回:A = 读出字节
  21          UINT8 Byte_Read(UINT8 * add)
  22          {
  23   1          UNION_16 my_unTemp16;
  24   1          
  25   1          IAP_DATA = 0x00;
  26   1          IAP_CONTR = ENABLE_ISP;         //打开IAP 功能, 设置Flash 操作等待时间
  27   1          IAP_CMD = 0x01;                 //IAP/ISP/EEPROM 字节读命令
  28   1      
  29   1          my_unTemp16.un_temp16 = (UINT16)add;
  30   1          IAP_ADDRH = my_unTemp16.un_temp8[0];    //设置目标单元地址的高8 位地址
  31   1          IAP_ADDRL = my_unTemp16.un_temp8[1];    //设置目标单元地址的低8 位地址
  32   1      
  33   1          //EA = 0;
  34   1          IAP_TRIG = CMD_TRIG_H;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
  35   1          IAP_TRIG = CMD_TRIG_L;   //送完A5h 后，ISP/IAP 命令立即被触发起动
  36   1          _nop_();
  37   1          //EA = 1;
  38   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  39   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  40   1          return (IAP_DATA);
  41   1      }
  42          
  43          //字节编程，调用前需打开IAP 功能，入口:DPTR = 字节地址, A= 须编程字节的数据
  44          void Byte_Program(UINT8 * add, UINT8 ch)
  45          {
  46   1          UNION_16 my_unTemp16;
  47   1          
  48   1          IAP_CONTR = ENABLE_ISP;         //打开 IAP 功能, 设置Flash 操作等待时间
  49   1          IAP_CMD = 0x02;                 //IAP/ISP/EEPROM 字节编程命令
  50   1      
  51   1          my_unTemp16.un_temp16 = (UINT16)add;
  52   1          IAP_ADDRH = my_unTemp16.un_temp8[0];    //设置目标单元地址的高8 位地址
  53   1          IAP_ADDRL = my_unTemp16.un_temp8[1];    //设置目标单元地址的低8 位地址
  54   1      
C51 COMPILER V9.52.0.0   EEPROM                                                            11/14/2016 12:11:10 PAGE 2   

  55   1          IAP_DATA = ch;                  //要编程的数据先送进IAP_DATA 寄存器
  56   1          //EA = 0;
  57   1          IAP_TRIG = CMD_TRIG_H;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
  58   1          IAP_TRIG = CMD_TRIG_L;   //送完A5h 后，ISP/IAP 命令立即被触发起动
  59   1          _nop_();
  60   1          //EA = 1;
  61   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  62   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  63   1      }
  64          
  65          //擦除扇区, 入口:DPTR = 扇区地址
  66          void Sector_Erase(UINT16 add)
  67          {
  68   1          UNION_16 my_unTemp16;
  69   1          
  70   1          IAP_CONTR = ENABLE_ISP;         //打开IAP 功能, 设置Flash 操作等待时间
  71   1          IAP_CMD = 0x03;                 //IAP/ISP/EEPROM 扇区擦除命令
  72   1      
  73   1          my_unTemp16.un_temp16 = add;
  74   1          IAP_ADDRH = my_unTemp16.un_temp8[0];    //设置目标单元地址的高8 位地址
  75   1          IAP_ADDRL = my_unTemp16.un_temp8[1];    //设置目标单元地址的低8 位地址
  76   1      
  77   1          //EA = 0;
  78   1          IAP_TRIG = CMD_TRIG_H;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
  79   1          IAP_TRIG = CMD_TRIG_L;   //送完A5h 后，ISP/IAP 命令立即被触发起动
  80   1          _nop_();
  81   1          //EA = 1;
  82   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  83   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  84   1      }
  85          
  86          void IAP_Disable()
  87          {
  88   1          //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  89   1          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  90   1          IAP_CONTR = 0;      //关闭IAP 功能
  91   1          IAP_CMD   = 0;      //清命令寄存器,使命令寄存器无命令,此句可不用
  92   1          IAP_TRIG  = 0;      //清命令触发寄存器,使命令触发寄存器无触发,此句可不用
  93   1          IAP_ADDRH = 0;
  94   1          IAP_ADDRL = 0;
  95   1      }
  96           
  97          
  98          /*************************************************************************
  99                                Read len bytes from eeprom
 100          **************************************************************************/
 101          
 102          void eeprom_read_block(UINT8 * Buffer, UINT8 * beginAddr, UINT8 len)
 103          {
 104   1          UINT8 i;
 105   1      
 106   1          for (i = 0; i < len; i++)
 107   1          {
 108   2              Buffer[i] = Byte_Read(beginAddr);
 109   2              beginAddr++;
 110   2          }
 111   1          
 112   1          return;
 113   1      }
 114          
 115          /*************************************************************************
 116                                write len bytes to eeprom
C51 COMPILER V9.52.0.0   EEPROM                                                            11/14/2016 12:11:10 PAGE 3   

 117          **************************************************************************/
 118          void eeprom_write_block(UINT8 * Buffer, UINT8 * beginAddr, UINT8 len)
 119          {
 120   1          UINT8 i;
 121   1      
 122   1          for (i = 0; i < len; i++)
 123   1          {
 124   2              Byte_Program(beginAddr, Buffer[i]);
 125   2              beginAddr++;
 126   2          }
 127   1      
 128   1          return;
 129   1      }
 130          
 131          /*************************************************************************
 132                                erase a sector
 133          **************************************************************************/
 134          
 135          //data flash: all 4K 
 136          //512Byte/sector, 8 sectors
 137          //Writing data flash must erase the sector, and then write every byte;
 138          //Each sector address as follows:
 139          UINT16 code SECTOR_PAGE[] = {
 140              0x0000, 0x0200, 0x0400, 0x0600, 
 141              0x0800, 0x0A00, 0x0C00, 0x0E00
 142          };
 143          
 144          void eeprom_erase_sector(UINT16 pageAddr)
 145          {
 146   1          Sector_Erase(pageAddr);
 147   1          
 148   1          return;
 149   1      }
 150          
 151          /*************************************
 152            Read Parameter from inn EEPROM
 153            with verify
 154          *************************************/
 155          //#define PARA_LEN    5
 156          #define PARA_LEN MAX_CFGPARA
 157          UINT8 ReadParaInEeprom(UINT8 offset)
 158          {
 159   1        UINT8 i = offset;
 160   1        UINT8 para_page_0[PARA_LEN];
 161   1        UINT8 para_page_1[PARA_LEN];
 162   1        UINT8 para_page_2[PARA_LEN];
 163   1      
 164   1        if (offset >= PARA_LEN) return 0xff;
 165   1        
 166   1          eeprom_read_block(para_page_0, (UINT8 *)SECTOR_PAGE[0], PARA_LEN);
 167   1          eeprom_read_block(para_page_1, (UINT8 *)SECTOR_PAGE[1], PARA_LEN);
 168   1          eeprom_read_block(para_page_2, (UINT8 *)SECTOR_PAGE[2], PARA_LEN);
 169   1         
 170   1        if (para_page_0[i] == para_page_1[i])
 171   1        {
 172   2          if (para_page_1[i] != para_page_2[i])           //sector 2 error
 173   2          {
 174   3              para_page_2[i] = para_page_0[i];            //Modify error byte
 175   3                  eeprom_erase_sector(SECTOR_PAGE[2]);        //Erase sector 2
 176   3                                                              //Write sector 2
 177   3              eeprom_write_block(para_page_2, (UINT8 *)SECTOR_PAGE[2] , PARA_LEN);
 178   3          }
C51 COMPILER V9.52.0.0   EEPROM                                                            11/14/2016 12:11:10 PAGE 4   

 179   2          return para_page_0[i];  
 180   2        }
 181   1        else if (para_page_0[i] == para_page_2[i])          //sector 1 error
 182   1        {
 183   2              para_page_1[i] = para_page_0[i];                //Modify error byte
 184   2            eeprom_erase_sector(SECTOR_PAGE[1]);            //Erase sector 1
 185   2                                                            //Write sector 1
 186   2            eeprom_write_block(para_page_1, (UINT8 *)SECTOR_PAGE[1] , PARA_LEN);
 187   2            return para_page_0[i];  
 188   2        }
 189   1        else                                                //Sector 0 error
 190   1        {
 191   2            para_page_0[i] = para_page_1[i];                //Modify error byte
 192   2            eeprom_erase_sector(SECTOR_PAGE[0]);            //Erase sector 0
 193   2            eeprom_write_block(para_page_0, (UINT8 *)SECTOR_PAGE[0] , PARA_LEN);
 194   2            return para_page_1[i];        
 195   2        }
 196   1      }
 197          
 198          /*******************************************************************************
 199                   检查参数是否超出范围，超出则恢复默认值,并存入备份区
 200            input:   none
 201            output:  none         
 202          *******************************************************************************/
 203          //                        1            2            3            4       5         6    7
 204          INT8U CODE  Para_MinTB[MAX_CFGPARA] = { MIN_ADDR,MIN_FINISHEDLED,MIN_WTTIME,MIN_FNDEFINE,MIN_DISPMODE,MIN_K
             -EYPRESSLED,MIN_CBM7008LMD };
 205          INT8U CODE  Para_MaxTB[MAX_CFGPARA] = { MAX_ADDR,MAX_FINISHEDLED,MAX_WTTIME,MAX_FNDEFINE,MAX_DISPMODE,MAX_K
             -EYPRESSLED,MAX_CBM7008LMD };
 206          INT8U CODE  Para_DefTB[MAX_CFGPARA] = { DEF_ADDR,DEF_FINISHEDLED,DEF_WTTIME,DEF_FNDEFINE,DEF_DISPMODE,DEF_K
             -EYPRESSLED,DEF_CBM7008LMD };
 207          
 208          void  ChkParaOverToDefVal(void)
 209          {
 210   1        UINT8 i;
 211   1      
 212   1        for (i = 0; i < MAX_CFGPARA; i++)
 213   1        { 
 214   2            // 判断是否超出范围
 215   2          if( (para.Byte[i] > Para_MaxTB[i])||(para.Byte[i] < Para_MinTB[i]) )
 216   2            { para.Byte[i] = Para_DefTB[i]; }
 217   2      
 218   2          para_bk.Byte[i] = para.Byte[i];          // 保存入备份区
 219   2        }
 220   1      }
 221          /*******************************************************************************
 222                        save Parameter to EEPROM
 223            input:   none
 224            output:  none         
 225          *******************************************************************************/
 226          void SaveParaToBlock(void)
 227          {
 228   1        INT8U i;
 229   1        // 检查参数是否溢出，是则恢复，并备份入备份区中
 230   1        ChkParaOverToDefVal();
 231   1        
 232   1        // 写入 eeprom  ，写3个区域
 233   1        for (i = 0; i < 3; i++)
 234   1        {
 235   2            eeprom_erase_sector(SECTOR_PAGE[i]);   
 236   2          eeprom_write_block (&para.Byte[0], (UINT8 *)SECTOR_PAGE[i], MAX_CFGPARA);
 237   2        }
C51 COMPILER V9.52.0.0   EEPROM                                                            11/14/2016 12:11:10 PAGE 5   

 238   1      }
 239          /*******************************************************************************
 240                        Load Parameter from EEPROM
 241            input:   none      
 242            output:  none         
 243          *******************************************************************************/
 244          void LoadParaInEeprom(void)
 245          {
 246   1        // 读出参数
 247   1        INT8U i;
 248   1        for(i = 0;i < MAX_CFGPARA;i++)
 249   1        { para.Byte[i] = ReadParaInEeprom(EE_ADDRESS+i); }
 250   1      
 251   1        // 检查参数是否溢出，是则恢复，并备份入备份区中
 252   1        if( (para.str.address == 0) )//||(addr == 0) )  
 253   1          { para.str.address = DEF_ADDR;  }     //默认加载参数
 254   1      
 255   1        ChkParaOverToDefVal();          // 检查参数是否超出范围，超过则恢复默认值
 256   1      }
 257          /*******************************************************************************
 258                          END         
 259          *******************************************************************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    695    ----
   CONSTANT SIZE    =     37    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      46
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
