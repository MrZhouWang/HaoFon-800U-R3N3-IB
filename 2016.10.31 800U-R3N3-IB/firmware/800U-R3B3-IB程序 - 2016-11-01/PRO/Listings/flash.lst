C51 COMPILER V9.52.0.0   FLASH                                                             11/21/2016 10:46:32 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE FLASH
OBJECT MODULE PLACED IN ..\OUT\flash.obj
COMPILER INVOKED BY: C:\Program Files\kile\C51\BIN\C51.EXE ..\SRC\flash.c ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE INCDIR(.
                    -.\INC) DEBUG OBJECTEXTEND PRINT(.\Listings\flash.lst) TABS(2) OBJECT(..\OUT\flash.obj)

line level    source

   1          #include "include.h"
   2          
   3          INT16U  CODE SECTOR_PAGE[] = {             //写入第11、12、13页
   4              0x1600, 0x1800, 0x1A00
   5          };
   6          INT8U CODE  Para_MinTB[MAX_CFGPARA] = { MIN_ADDR,MIN_FINISHEDLED,MIN_WTTIME,MIN_FNDEFINE,MIN_DISPMODE,MIN_K
             -EYPRESSLED,MIN_CBM7008LMD };
   7          INT8U CODE  Para_MaxTB[MAX_CFGPARA] = { MAX_ADDR,MAX_FINISHEDLED,MAX_WTTIME,MAX_FNDEFINE,MAX_DISPMODE,MAX_K
             -EYPRESSLED,MAX_CBM7008LMD };
   8          INT8U CODE  Para_DefTB[MAX_CFGPARA] = { DEF_ADDR,DEF_FINISHEDLED,DEF_WTTIME,DEF_FNDEFINE,DEF_DISPMODE,DEF_K
             -EYPRESSLED,DEF_CBM7008LMD };
   9          
  10          
  11          void FLASH_ByteWrite(INT16U addr, char byte)
  12          {
  13   1        bit EA_SAVE = EA;                   // preserve EA
  14   1        char xdata *  pwrite;           // FLASH write pointer
  15   1      
  16   1        EA = 0;                             // disable interrupts
  17   1        //RSTSRC = 0x02;                    // enable VDD monitor as a reset source
  18   1      
  19   1        pwrite = (char xdata *) addr;
  20   1      
  21   1        PSCTL |= 0x01;                      // PSWE = 1
  22   1        FLKEY  = 0xA5;                      // Key Sequence 1
  23   1        FLKEY  = 0xF1;                      // Key Sequence 2
  24   1      
  25   1        //RSTSRC = 0x02;                    // enable VDD monitor as a reset source
  26   1      
  27   1        *pwrite = byte;                     // write the byte
  28   1      
  29   1        PSCTL &= ~0x01;                     // PSWE = 0
  30   1      
  31   1        EA = EA_SAVE;                       // restore interrupts
  32   1      }
  33          
  34          
  35          unsigned char FLASH_ByteRead (INT16U addr)
  36          {
  37   1         bit EA_SAVE = EA;                   // preserve EA
  38   1         char code *  pread;             // FLASH read pointer
  39   1         unsigned char byte;
  40   1      
  41   1         EA = 0;                             // disable interrupts
  42   1      
  43   1         pread = (char code *) addr;
  44   1      
  45   1         byte = *pread;                      // read the byte
  46   1      
  47   1         EA = EA_SAVE;                       // restore interrupts
  48   1      
  49   1         return byte;
  50   1      }
  51          
C51 COMPILER V9.52.0.0   FLASH                                                             11/21/2016 10:46:32 PAGE 2   

  52          ////////////////////////////////////////////////////////////////////////////////
  53          // 功能描述 : Flash 擦除页
  54          // 输入参数 : 
  55          // 返回参数 : 
  56          // 说明     : 
  57          ////////////////////////////////////////////////////////////////////////////////
  58          void FLASH_PageErase (INT16U addr)
  59          {
  60   1        bit EA_SAVE = EA;                   // preserve EA
  61   1        char xdata * data pwrite;           // FLASH write pointer
  62   1      
  63   1        EA = 0;                             // disable interrupts
  64   1      
  65   1        //RSTSRC = 0x02;                    // enable VDD monitor as a reset source
  66   1      
  67   1        pwrite = (char xdata *) addr;
  68   1      
  69   1        PSCTL |= 0x03;                      // PSWE = 1; PSEE = 1
  70   1        FLKEY  = 0xA5;                      // Key Sequence 1
  71   1        FLKEY  = 0xF1;                      // Key Sequence 2
  72   1        
  73   1        //RSTSRC = 0x02;                    // enable VDD monitor as a reset source
  74   1        *pwrite = 0;                        // initiate page erase
  75   1      
  76   1        PSCTL &= ~0x03;                     // PSWE = 0; PSEE = 0
  77   1      
  78   1        EA = EA_SAVE;                       // restore interrupts
  79   1      } 
  80          
  81          
  82          void FLASH_Write (INT8U * Buffer,  INT16U beginAddr, INT8U len)
  83          {
  84   1         INT8U i;
  85   1      
  86   1         for (i = 0; i<len; i++) {
  87   2            FLASH_ByteWrite(beginAddr, Buffer[i]);
  88   2            beginAddr++;
  89   2         }
  90   1      }
  91          
  92          void FLASH_Read (INT8U * Buffer, INT16U beginAddr, INT8U len)
  93          {
  94   1         INT8U i;
  95   1      
  96   1          for (i = 0; i < len; i++)
  97   1          {
  98   2              Buffer[i] = FLASH_ByteRead(beginAddr);
  99   2              beginAddr++;
 100   2          }
 101   1         return ;
 102   1      }
 103          
 104          /*******************************************************************************
 105                        save Parameter to FLASH
 106            input:   none
 107            output:  none         
 108          *******************************************************************************/
 109          void SaveParaToBlock(void)
 110          {
 111   1        INT8U i;
 112   1                                          
 113   1        ChkParaOverToDefVal();             // 检查参数是否溢出，是则恢复，并备份入备份区中
C51 COMPILER V9.52.0.0   FLASH                                                             11/21/2016 10:46:32 PAGE 3   

 114   1        
 115   1        
 116   1        for (i = 0; i < 3; i++)            // 写入  flash ，写3个区域
 117   1        {
 118   2            FLASH_PageErase(SECTOR_PAGE[i]);   
 119   2            FLASH_Write (&para.Byte[0], SECTOR_PAGE[i], MAX_CFGPARA);
 120   2        }
 121   1      }
 122          /*******************************************************************************
 123                        check parameter value 
 124            input:   none
 125            output:  none         
 126          *******************************************************************************/
 127          void  ChkParaOverToDefVal(void)
 128          {
 129   1        UINT8 i;
 130   1      
 131   1        for (i = 0; i < MAX_CFGPARA; i++)
 132   1        { 
 133   2            // 判断是否超出范围
 134   2          if( (para.Byte[i] > Para_MaxTB[i])||(para.Byte[i] < Para_MinTB[i]) )
 135   2            { para.Byte[i] = Para_DefTB[i]; }
 136   2      
 137   2          para_bk.Byte[i] = para.Byte[i];          // 保存入备份区
 138   2        }
 139   1      }
 140          /*******************************************************************************
 141                        Load Parameter from EEPROM
 142            input:   none      
 143            output:  none         
 144          *******************************************************************************/
 145          void LoadParaFromFlash(void)
 146          {
 147   1        
 148   1        INT8U i;
 149   1        for(i = 0;i < MAX_CFGPARA;i++)
 150   1        { para.Byte[i] = ReadParaFromFLASH(EE_ADDRESS+i); }     // 读出参数
 151   1        
 152   1        if( (para.str.address == 0) )
 153   1          { para.str.address = DEF_ADDR;  }                     //默认加载参数
 154   1      
 155   1        ChkParaOverToDefVal();                                  // 检查参数是否超出范围，超过则恢复默认值
 156   1      }
 157          /*************************************
 158            Read Parameter from inn EEPROM
 159            with verify
 160          *************************************/
 161          #define PARA_LEN MAX_CFGPARA
 162          UINT8 ReadParaFromFLASH(UINT8 offset)
 163          {
 164   1        UINT8 i = offset;
 165   1        UINT8 para_page_0[PARA_LEN];
 166   1        UINT8 para_page_1[PARA_LEN];
 167   1        UINT8 para_page_2[PARA_LEN];
 168   1      
 169   1        if (offset >= PARA_LEN) return 0xff;
 170   1        
 171   1        FLASH_Read (para_page_0, SECTOR_PAGE[0], PARA_LEN);
 172   1        FLASH_Read (para_page_1, SECTOR_PAGE[1], PARA_LEN);
 173   1        FLASH_Read (para_page_2, SECTOR_PAGE[2], PARA_LEN);
 174   1         
 175   1        if (para_page_0[i] == para_page_1[i])
C51 COMPILER V9.52.0.0   FLASH                                                             11/21/2016 10:46:32 PAGE 4   

 176   1        {
 177   2          if (para_page_1[i] != para_page_2[i])           //sector 2 error
 178   2          {
 179   3              para_page_2[i] = para_page_0[i];            //Modify error byte
 180   3              FLASH_PageErase(SECTOR_PAGE[2]);        //Erase sector 2
 181   3                                                              //Write sector 2
 182   3              FLASH_Write(para_page_2, SECTOR_PAGE[2] , PARA_LEN);
 183   3          }
 184   2          return para_page_0[i];  
 185   2        }
 186   1        else if (para_page_0[i] == para_page_2[i])          //sector 1 error
 187   1        {
 188   2            para_page_1[i] = para_page_0[i];                //Modify error byte
 189   2            FLASH_PageErase(SECTOR_PAGE[1]);            //Erase sector 1
 190   2                                                            //Write sector 1
 191   2            FLASH_Write(para_page_1, SECTOR_PAGE[1] , PARA_LEN);
 192   2            return para_page_0[i];  
 193   2        }
 194   1        else                                                //Sector 0 error
 195   1        {
 196   2            para_page_0[i] = para_page_1[i];                //Modify error byte
 197   2            FLASH_PageErase(SECTOR_PAGE[0]);            //Erase sector 0
 198   2            FLASH_Write(para_page_0, SECTOR_PAGE[0] , PARA_LEN);
 199   2            return para_page_1[i];        
 200   2        }
 201   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    550    ----
   CONSTANT SIZE    =     27    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      36
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
